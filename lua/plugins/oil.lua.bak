-- NOTE: This file is stolen from: https://gitlab.com/configs_and_scripts/nvim/-/blob/main/config/lua/plugins/oil.lua?ref_type=heads
-- Checkout https://www.reddit.com/r/neovim/s/VvjeQLLO4S for more info and a video
-- but it makes oil behave like yazi

------------------------------------
-------------- HELPERS -------------
------------------------------------
local function split_str(inputstr, sep)
  if sep == nil then sep = "%s" end
  local t = {}
  for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
    table.insert(t, str)
  end
  return t
end

local function join(table, separator)
  local joined_string = ""

  for _, table_section in pairs(table) do
    joined_string = joined_string .. separator .. table_section
  end

  return joined_string
end

local function filter(unfiltered_table, filter_function)
  local filtered_table = {}
  for _, table_element in pairs(unfiltered_table) do
    local filter_result = filter_function(table_element)

    if filter_result ~= nil then table.insert(filtered_table, filter_result) end
  end

  return filtered_table
end

local function copy_into(table, table_to_merge)
  table = table ~= nil and table or {}
  for k, v in pairs(table_to_merge) do
    if type(v) == "table" then
      table[k] = copy_into(table[k], v)
    else
      table[k] = v
    end
  end

  return table
end

local function map(table, callback)
  for k, v in pairs(table) do
    table[k] = callback(k, v)
  end

  return table
end

------------------------------------
------------------------------------
------------------------------------

local oil_ui = {}

oil_ui.preview_entry_update_timer = vim.uv.new_timer()

oil_ui.update_oil_paths = function(current, parent, preview)
  --current dir is the master of the three windows, when it's path changes, all other windows follow suit as default behaviour.
  --if current is null or equal to the last oil_state (e.g: you dont want to change the master path now, used the same path or didn't define current path ), default behaviour is to decouple paths and consider each one separately.
  --such behaviour is good if you only want to edit a new preview or parent, or update paths independently.
  if join(current, "/") ~= join(vim.g.oil_state.current.window_path, "/") and join(current, "/") ~= "" then
    if tonumber(vim.fn.system("if [ -f '" .. join(current, "/") .. "' ]; then echo 1; else echo 0; fi")) == 1 then
      current = split_str(string.gsub(join({ unpack(current, 1, (#current - 1)) }, "/"), "[\n\r]", ""), "/")
    end
    parent = { unpack(current, 1, #current - 1) }

    --default preview dir is the first dir/file found using linux "ls" command using various options that in most cases returns the equivalent of the first dir/file in a oil buffer.
    preview = split_str(
      string.gsub(
        join(current, "/")
          .. "/"
          .. vim.fn.system(
            "ls -a --group-directories-first -v '/"
              .. string.sub(join(current, "/"), 2, #join(current, "/"))
              .. "' | sed -n '3,3p'"
          ),
        "[\n\r]",
        ""
      ),
      "/"
    )
  else
    if join(current, "/") == "" then current = vim.g.oil_state.current.window_path end

    if join(parent, "/") == "" then parent = vim.g.oil_state.parent.window_path end

    if join(preview, "") == "" then preview = vim.g.oil_state.preview.window_path end
  end

  return current, parent, preview
end

oil_ui.update_oil_win_numbers = function(current, parent, preview)
  --if windows are not yet initialized, open windows in order of current, parent and preview, with current still being the main window.
  if current == nil then
    current = vim.fn.win_getid()
  else
    current = vim.g.oil_state.current.window_number
  end
  if parent == nil then
    parent = vim.api.nvim_open_win(0, false, { split = "left" })
  else
    parent = vim.g.oil_state.parent.window_number
  end
  if preview == nil then
    preview = vim.api.nvim_open_win(0, false, { split = "right" })
  else
    preview = vim.g.oil_state.preview.window_number
  end

  return current, parent, preview
end

oil_ui.update_preview_window = function(current, preview)
  local oil = require "oil"
  --only update preview window if new path is different from last oil_state. If not, almost all behaviour of a default open_oil_with_parent_and_preview is nullified to save process time.
  if join(preview.window_path, "/") ~= join(vim.g.oil_state.preview.window_path, "/") then
    if join(preview.window_path, "/") ~= join(current.window_path, "/") then
      --here, customizable behaviour for different filetypes will be implemented. In case a valid directory is found, default behaviour is to open a oil buffer.
      if
        tonumber(vim.fn.system("if [ -f '" .. join(preview.window_path, "/") .. "' ]; then echo 1; else echo 0; fi"))
        == 1
      then
        vim.api.nvim_win_call(preview.window_number, function() vim.cmd.ed(join(preview.window_path, "/")) end)
      elseif vim.fn.isdirectory(join(preview.window_path, "/")) then
        vim.api.nvim_win_call(preview.window_number, function() oil.open(join(preview.window_path, "/")) end)
      end
    else
      vim.api.nvim_win_call(preview.window_number, function() oil.open(join(current.window_path, "/")) end)
    end
  end

  return preview
end

oil_ui.update_oil_windows = function(current, parent, preview)
  local oil = require "oil"
  preview = oil_ui.update_preview_window(current, preview)

  if join(current.window_path, "/") ~= join(vim.g.oil_state.current.window_path, "/") then
    if #current.window_path ~= 0 then
      vim.api.nvim_win_call(current.window_number, function() oil.open(join(current.window_path, "/")) end)
    else
      vim.api.nvim_win_call(current.window_number, function() oil.open "/" end)
    end
  end

  if join(parent.window_path, "/") ~= join(vim.g.oil_state.parent.window_path, "/") then
    if #parent.window_path ~= 0 then
      pcall(vim.api.nvim_win_call, parent.window_number, function() oil.open(join(parent.window_path, "/")) end)
    else
      if #current.window_path ~= 0 then
        pcall(vim.api.nvim_win_call, parent.window_number, function() oil.open "/" end)
      else
        pcall(vim.api.nvim_win_call, parent.window_number, function()
          vim.cmd.bd()
          parent.window_number = nil
        end)
      end
    end
  end

  return current, parent, preview
end

oil_ui.update_oil_buf_numbers = function(current, parent, preview)
  --update of new buffer numbers for all windows, used in operations with unloading and loading buffers, especially in preview window.
  current.buffer_number = vim.api.nvim_win_call(current.window_number, function()
    local buffer_number = vim.api.nvim_win_get_buf(vim.fn.win_getid())
    return buffer_number
  end)
  parent.buffer_number = vim.api.nvim_win_call(parent.window_number, function()
    local buffer_number = vim.api.nvim_win_get_buf(vim.fn.win_getid())
    return buffer_number
  end)
  preview.buffer_number = vim.api.nvim_win_call(preview.window_number, function()
    local buffer_number = vim.api.nvim_win_get_buf(vim.fn.win_getid())
    return buffer_number
  end)

  return current, parent, preview
end

oil_ui.clean_past_preview = function(current, parent, preview)
  --clean preview window command with various options that were found to be needed.
  --preview buffer number needs to be valid (not nil)
  --if current preview buffer is equal to last state (e.g: mouse is held in place in same oil entry), no unloading happens, as it would remove the preview window and would be undesirable behaviour.
  --if last state preview buffer number (the one to be deleted) is the new current buffer number (e.g: when selecting the dir under the cursor with preview active), do not delete preview, as now its the new current and it would remove its window and break expected behaviour.
  --if last state preview buffer number is equal to the original_file (file or directory from open_oil_with_parent_and_preview was first called), do not delete buffer, as it would erase jumplist and not saved modifications to such buffer.
  if
    vim.g.oil_state.preview.buffer_number ~= nil
    and vim.g.oil_state.preview.buffer_number ~= current.buffer_number
    and vim.g.oil_state.preview.buffer_number ~= parent.buffer_number
    and vim.g.oil_state.preview.buffer_number ~= preview.buffer_number
    and vim.g.oil_state.preview.buffer_number ~= vim.g.oil_state.original_file.buffer_number
  then
    pcall(
      vim.api.nvim_win_call,
      preview.window_number,
      function() vim.cmd.bd(vim.g.oil_state.preview.buffer_number) end
    )
  end
end

oil_ui.update_state = function(new_state)
  if new_state ~= nil then
    local temp_state = vim.g.oil_state
    new_state = map(new_state, function(_, v)
      if v.window_path ~= nil and type(v.window_path) == "table" then v.window_path = join(v.window_path, "/") end
      return v
    end)

    temp_state = copy_into(temp_state, new_state)

    temp_state = map(temp_state, function(_, v)
      if v.window_path ~= nil and type(v.window_path) == "string" then v.window_path = split_str(v.window_path, "/") end
      return v
    end)

    vim.g.oil_state = temp_state
  else
    vim.g.oil_state = {
      original_file = { path = nil, buffer_number = nil },
      current = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
      parent = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
      preview = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
    }
  end
end

oil_ui.open_oil_with_parent_and_preview = function(current, parent, preview)
  --default behaviour of function is to accept overrides and in case of none, repeat last operation, effectively nullifying all behaviour.
  local original_file = { path = nil, buffer_number = nil }
  current = current ~= nil and current or vim.g.oil_state.current
  parent = parent ~= nil and parent or vim.g.oil_state.parent
  preview = preview ~= nil and preview or vim.g.oil_state.preview

  --first operation when not in oil buffer (vim.g.is_oil_active) is to save start location (original_file path and buffer_number), and proceed.
  if not vim.g.is_oil_active then
    original_file.path =
      string.gsub(vim.fn.expand "%:p" ~= "" and vim.fn.expand "%:p" or vim.fn.getcwd(-1, -1), "[\n\r]", "")
    original_file.buffer_number = vim.fn.bufnr()

    local path_to_open = original_file.path
    --default behaviour for open_oil_with_parent_and_preview with an empty current.window_path is to open the parent dir of the original file/dir from which it was invoked.
    if join(current.window_path, "/") == "" then
      current.window_path = filter(split_str(path_to_open, "/"), function(el)
        local startIndex, _ = string.find(el, "oil:")
        if startIndex == nil then
          return el
        else
          return nil
        end
      end)
    end

    current.window_path, parent.window_path, preview.window_path =
      oil_ui.update_oil_paths(current.window_path, parent.window_path, preview.window_path)
  else
    --after already being inside an active oil_state, default behaviour prioritizes new overrides of current, parent and preview paths, so you can change things based on past state or change the location of the three windows entirely.
    if join(current.window_path, "/") ~= "" then
      current.window_path, parent.window_path, preview.window_path =
        oil_ui.update_oil_paths(current.window_path, parent.window_path, preview.window_path)
    else
      current.window_path = vim.g.oil_state.current.window_path
      current.window_path, parent.window_path, preview.window_path =
        oil_ui.update_oil_paths(current.window_path, parent.window_path, preview.window_path)
    end
  end

  --various functions for updating the important pieces of information about the new state before pushing it to the actual state of the oil buffers.
  current.window_number, parent.window_number, preview.window_number =
    oil_ui.update_oil_win_numbers(current.window_number, parent.window_number, preview.window_number)
  current, parent, preview = oil_ui.update_oil_windows(current, parent, preview)
  current, parent, preview = oil_ui.update_oil_buf_numbers(current, parent, preview)
  oil_ui.clean_past_preview(current, parent, preview)

  --start timer for reading entries on current window
  if not vim.g.is_oil_active then
    oil_ui.preview_entry_update_timer:start(100, 100, function()
      if vim.g.oil_preview_active then
        vim.schedule(function()
          if vim.fn.win_getid() == vim.g.oil_state.current.window_number and vim.fn.mode() == "n" then
            oil_ui.cursor_file_preview()
          end
        end)
      end
    end)
  end

  vim.g.is_oil_active = true
  oil_ui.update_state {
    original_file = original_file.path ~= nil and original_file or vim.g.oil_state.original_file,
    current = {
      window_number = current.window_number,
      window_path = current.window_path,
      buffer_number = current.buffer_number,
    },
    parent = {
      window_number = parent.window_number,
      window_path = parent.window_path,
      buffer_number = parent.buffer_number,
    },
    preview = {
      window_number = preview.window_number,
      window_path = preview.window_path,
      buffer_number = preview.buffer_number,
    },
  }
end

oil_ui.cursor_file_preview = function()
  local oil = require "oil"
  local current_dir = oil.get_current_dir()
  local selected_file = oil.get_cursor_entry()

  --preview update for entry on cursor. As seen before, most of the window information will not change, and processes involving such windows will not occur. Only the preview window will have its information updated and window content changed accordingly.
  if selected_file ~= nil and selected_file.name ~= ".." then
    ---@diagnostic disable-next-line: cast-local-type
    current_dir = split_str(current_dir, "/")
    current_dir[#current_dir + 1] = selected_file.name
    if join(current_dir, "/") ~= join(vim.g.oil_state.preview.window_path, "/") then
      local new_preview = {
        window_number = vim.g.oil_state.preview.window_number,
        window_path = current_dir,
        buffer_number = vim.g.oil_state.preview.buffer_number,
      }

      new_preview = oil_ui.update_preview_window(vim.g.oil_state.current, new_preview)
      _, _, new_preview = oil_ui.update_oil_buf_numbers(vim.g.oil_state.current, vim.g.oil_state.parent, new_preview)
      oil_ui.clean_past_preview(vim.g.oil_state.current, vim.g.oil_state.parent, new_preview)
      oil_ui.update_state { preview = new_preview }
    end
  end
end

oil_ui.close_oil_windows = function(file_to_open)
  --default behaviour for close_oil_windows is to open the original_file defined in oil_state, but it offers a custom path to open, so you can customize a select entry action or any other "close to X file" action.
  local new_original_file = file_to_open ~= nil and file_to_open or vim.g.oil_state.original_file.path

  pcall(vim.api.nvim_win_call, vim.g.oil_state.current.window_number, function() vim.cmd.bd() end)
  pcall(vim.api.nvim_win_call, vim.g.oil_state.parent.window_number, function() vim.cmd.bd() end)
  pcall(vim.api.nvim_win_call, vim.g.oil_state.preview.window_number, function()
    if vim.g.oil_state.preview.buffer_number ~= vim.g.oil_state.original_file.buffer_number then vim.cmd.bd() end
  end)

  pcall(vim.cmd.ed, new_original_file)

  --removing of timer to not have noticeable effects on performance
  vim.uv.timer_stop(oil_ui.preview_entry_update_timer)

  --reseting of oil_state and other variables
  vim.g.is_oil_active = false
  vim.g.oil_preview_active = true
  oil_ui.update_state(nil)
end

oil_ui.select_oil_entry_with_parent_and_preview = function()
  local oil = require "oil"
  local current_dir = oil.get_current_dir()
  local selected_file = oil.get_cursor_entry()
  if not current_dir or not selected_file then return end

  --select entry on cursor action override, implementing navigation on an absolute basis (e.g: if you select a dir on the parent directory, that entry becomes the new current directory, enabling even more cross directory navigation and operations).
  if selected_file.name == ".." then
    ---@diagnostic disable-next-line: cast-local-type
    current_dir = split_str(current_dir, "/")
    ---@diagnostic disable-next-line: cast-local-type
    current_dir = { unpack(current_dir, 1, #current_dir - 1) }
    ---@diagnostic disable-next-line: cast-local-type
    if join(current_dir, "/") == "" then current_dir = { "" } end

    oil_ui.open_oil_with_parent_and_preview({
      window_number = vim.g.oil_state.current.window_number,
      window_path = current_dir,
      buffer_number = vim.g.oil_state.current.buffer_number,
    }, vim.g.oil_state.parent, vim.g.oil_state.preview)
  else
    ---@diagnostic disable-next-line: cast-local-type
    current_dir = split_str(current_dir, "/")
    current_dir[#current_dir + 1] = selected_file.name

    --if selected entry is not a file, update windows accordingly. If it is a file, close all oil windows, open such file and reset state.
    if tonumber(vim.fn.system("if [ -f '" .. join(current_dir, "/") .. "' ]; then echo 1; else echo 0; fi")) ~= 1 then
      oil_ui.open_oil_with_parent_and_preview({
        window_number = vim.g.oil_state.current.window_number,
        window_path = current_dir,
        buffer_number = vim.g.oil_state.current.buffer_number,
      }, vim.g.oil_state.parent, vim.g.oil_state.preview)
    else
      oil_ui.close_oil_windows(join(current_dir, "/"))
    end
  end
end

return {
  "stevearc/oil.nvim",
  lazy = false,
  config = function()
    vim.g.is_oil_loaded = true
    vim.g.is_oil_active = false
    vim.g.oil_preview_active = true
    vim.g.oil_state = {
      original_file = { path = nil, buffer_number = nil },
      current = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
      parent = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
      preview = {
        window_number = nil,
        window_path = {},
        buffer_number = nil,
      },
    }

    require("oil").setup {
      -- Oil will take over directory buffers (e.g. `vim .` or `:e src/`)
      -- Set to false if you want some other plugin (e.g. netrw) to open when you edit directories.
      default_file_explorer = true,

      -- Id is automatically added at the beginning, and name at the end
      -- See :help oil-columns
      columns = {
        "type",
        "icon",
        "permissions",
        "size",
        "mtime",
      },

      -- Buffer-local options to use for oil buffers
      buf_options = {
        buflisted = true,
        bufhidden = "",
      },

      -- Window-local options to use for oil buffers
      win_options = {
        wrap = false,
        signcolumn = "no",
        cursorcolumn = false,
        foldcolumn = "0",
        spell = false,
        list = false,
        conceallevel = 3,
        concealcursor = "nvic",
      },

      -- Send deleted files to the trash instead of permanently deleting them (:help oil-trash)
      delete_to_trash = true,

      -- Skip the confirmation popup for simple operations (:help oil.skip_confirm_for_simple_edits)
      skip_confirm_for_simple_edits = true,

      -- Selecting a new/moved/renamed file or directory will prompt you to save changes first
      -- (:help prompt_save_on_select_new_entry)
      prompt_save_on_select_new_entry = true,

      -- Oil will automatically delete hidden buffers after this delay
      -- You can set the delay to false to disable cleanup entirely
      -- Note that the cleanup process only starts when none of the oil buffers are currently displayed
      cleanup_delay_ms = 2000,

      lsp_file_methods = {
        -- Enable or disable LSP file operations
        enabled = false,

        -- Time to wait for LSP file operations to complete before skipping
        timeout_ms = 1000,

        -- Set to true to autosave buffers that are updated with LSP willRenameFiles
        -- Set to "unmodified" to only save unmodified buffers
        autosave_changes = false,
      },

      -- Constrain the cursor to the editable parts of the oil buffer
      -- Set to `false` to disable, or "name" to keep it on the file names
      constrain_cursor = "editable",

      -- Set to true to watch the filesystem for changes and reload oil
      watch_for_changes = true,

      -- Keymaps in oil buffer. Can be any value that `vim.keymap.set` accepts OR a table of keymap
      -- options with a `callback` (e.g. { callback = function() ... end, desc = "", mode = "n" })
      -- Additionally, if it is a string that matches "actions.<name>",
      -- it will use the mapping at require("oil.actions").<name>
      -- Set to `false` to remove a keymap
      -- See :help oil-actions for a list of all available actions
      keymaps = {
        ["g?"] = { "actions.show_help", mode = "n" },
        ["<CR>"] = oil_ui.select_oil_entry_with_parent_and_preview,
        ["l"] = { oil_ui.select_oil_entry_with_parent_and_preview, mode = "n" },
        ["h"] = {
          function()
            local new_current = vim.g.oil_state.current
            new_current.window_path = { unpack(new_current.window_path, 1, #new_current.window_path - 1) }
            if join(new_current.window_path, "/") == "" then new_current.window_path = { "" } end
            oil_ui.open_oil_with_parent_and_preview(new_current, vim.g.oil_state.parent, vim.g.oil_state.preview)
          end,
          mode = "n",
        },
        ["<Right>"] = { oil_ui.select_oil_entry_with_parent_and_preview, mode = "n" },
        ["<Left>"] = {
          function()
            local new_current = vim.g.oil_state.current
            new_current.window_path = { unpack(new_current.window_path, 1, #new_current.window_path - 1) }
            if join(new_current.window_path, "/") == "" then new_current.window_path = { "" } end
            oil_ui.open_oil_with_parent_and_preview(new_current, vim.g.oil_state.parent, vim.g.oil_state.preview)
          end,
          mode = "n",
        },
        ["<C-s>"] = { "actions.select", opts = { vertical = true } },
        ["<C-h>"] = { "actions.select", opts = { horizontal = true } },
        ["<C-t>"] = { "actions.select", opts = { tab = true } },
        ["<C-p>"] = "actions.preview",
        ["<C-c>"] = { oil_ui.close_oil_windows, mode = "n" },
        ["<C-l>"] = "actions.refresh",
        ["-"] = {
          function()
            local new_current = vim.g.oil_state.current
            new_current.window_path = { unpack(new_current.window_path, 1, #new_current.window_path - 1) }
            if join(new_current.window_path, "/") == "" then new_current.window_path = { "" } end
            oil_ui.open_oil_with_parent_and_preview(new_current, vim.g.oil_state.parent, vim.g.oil_state.preview)
          end,
          mode = "n",
        },
        ["_"] = { "actions.open_cwd", mode = "n" },
        ["`"] = { "actions.cd", mode = "n" },
        ["~"] = { "actions.cd", opts = { scope = "tab" }, mode = "n" },
        ["gs"] = { "actions.change_sort", mode = "n" },
        ["gx"] = "actions.open_external",
        ["g."] = { "actions.toggle_hidden", mode = "n" },
        ["g\\"] = { "actions.toggle_trash", mode = "n" },
        ["+"] = { function() vim.g.oil_preview_active = not vim.g.oil_preview_active end },
      },

      -- Set to false to disable all of the above keymaps
      use_default_keymaps = true,

      view_options = {
        -- Show files and directories that start with "."
        show_hidden = true,

        -- This function defines what is considered a "hidden" file
        is_hidden_file = function(name, _)
          local m = name:match "^%."
          return m ~= nil
        end,

        -- This function defines what will never be shown, even when `show_hidden` is set
        is_always_hidden = function(_, _) return false end,

        -- Sort file names with numbers in a more intuitive order for humans.
        -- Can be "fast", true, or false. "fast" will turn it off for large directories.
        natural_order = true,

        -- Sort file and directory names case insensitive
        case_insensitive = false,

        sort = {
          -- sort order can be "asc" or "desc"
          -- see :help oil-columns to see which columns are sortable
          { "type", "asc" },
          { "name", "asc" },
        },

        -- Customize the highlight group for the file name
        highlight_filename = function(_, _, _, _) return nil end,
      },

      -- Extra arguments to pass to SCP when moving/copying files over SSH
      extra_scp_args = {},

      -- EXPERIMENTAL support for performing file operations with git
      git = {
        -- Return true to automatically git add/mv/rm files
        add = function(_) return false end,
        mv = function(_, _) return false end,
        rm = function(_) return false end,
      },

      -- Configuration for the floating window in oil.open_float
      float = {
        -- Padding around the floating window
        padding = 2,

        -- max_width and max_height can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
        max_width = 0,
        max_height = 0,
        border = "rounded",
        win_options = {
          winblend = 0,
        },

        -- optionally override the oil buffers window title with custom function: fun(winid: integer): string
        get_win_title = nil,

        -- preview_split: Split direction: "auto", "left", "right", "above", "below".
        preview_split = "auto",

        -- This is the config that will be passed to nvim_open_win.
        -- Change values here to customize the layout
        override = function(conf) return conf end,
      },
      -- Configuration for the file preview window
      preview_win = {
        -- Whether the preview window is automatically updated when the cursor is moved
        update_on_cursor_moved = true,

        -- How to open the preview window "load"|"scratch"|"fast_scratch"
        preview_method = "fast_scratch",

        -- A function that returns true to disable preview on a file e.g. to avoid lag
        disable_preview = function(_) return false end,

        -- Window-local options to use for preview window buffers
        win_options = {},
      },

      -- Configuration for the floating action confirmation window
      confirmation = {
        -- Width dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
        -- min_width and max_width can be a single value or a list of mixed integer/float types.
        -- max_width = {100, 0.8} means "the lesser of 100 columns or 80% of total"
        max_width = 0.9,

        -- min_width = {40, 0.4} means "the greater of 40 columns or 40% of total"
        min_width = { 40, 0.4 },

        -- optionally define an integer/float for the exact width of the preview window
        width = nil,

        -- Height dimensions can be integers or a float between 0 and 1 (e.g. 0.4 for 40%)
        -- min_height and max_height can be a single value or a list of mixed integer/float types.
        -- max_height = {80, 0.9} means "the lesser of 80 columns or 90% of total"
        max_height = 0.9,

        -- min_height = {5, 0.1} means "the greater of 5 columns or 10% of total"
        min_height = { 5, 0.1 },

        -- optionally define an integer/float for the exact height of the preview window
        height = nil,
        border = "rounded",
        win_options = {
          winblend = 0,
        },
      },

      -- Configuration for the floating progress window
      progress = {
        max_width = 0.9,
        min_width = { 40, 0.4 },
        width = nil,
        max_height = { 10, 0.9 },
        min_height = { 5, 0.1 },
        height = nil,
        border = "rounded",
        minimized_border = "none",
        win_options = {
          winblend = 0,
        },
      },

      -- Configuration for the floating SSH window
      ssh = {
        border = "rounded",
      },

      -- Configuration for the floating keymaps help window
      keymaps_help = {
        border = "rounded",
      },
    }
  end,
  keys = {
    {
      "<A-->",
      oil_ui.open_oil_with_parent_and_preview,
      desc = "Open file manager in cfd (current file directory)",
    },
    {
      "<A-=>",
      function()
        oil_ui.open_oil_with_parent_and_preview(
          { window_number = nil, window_path = split_str(vim.fn.getcwd(-1, -1), "/"), buffer_number = nil },
          vim.g.oil_state.parent,
          vim.g.oil_state.preview
        )
      end,
      desc = "Open file manager in cwd",
    },
  },
}
